# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://kedro.readthedocs.io/en/stable/data/data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
# The Data Catalog supports being able to reference the same file using two different DataSet implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://kedro.readthedocs.io/en/stable/data/data_catalog.html
# src/kedromcbee/extras/dataset/clstr_dataset.py
# data/03_primary/cdhit_prokka_nometa_allbins_allexp_global_0.9.clstr

partition_prokka_faa:
    type: PartitionedDataSet
    path: data/01_raw/prokka_output_nometa #control.001/
    filename_suffix: ".faa"
    layer: raw
    dataset: 
        type: biosequence.BioSequenceDataSet
        load_args: {'format': 'fasta'}
        save_args: {'format': 'fasta'}

partition_prokka_gff:
    type: PartitionedDataSet
    path: data/01_raw/prokka_output_nometa #control.001/
    filename_suffix: ".gff"
    layer: raw
    dataset: 
        type: kedromcbee.extras.dataset.gff_dataset.GffDataSet

data_processing.fasta_prokka:
    type: biosequence.BioSequenceDataSet
    filepath: data/02_intermediate/fasta_prokka_bins.fasta
    load_args: {'format': 'fasta'}
    save_args: {'format': 'fasta'}
    layer: intermediate

data_processing.merged_ids:
    type: json.JSONDataSet
    filepath: data/02_intermediate/merged_ids.json
    layer: intermediate
    #load_args:
    #    index_col: 'single'
    #save_args:
    #    index: True

data_processing.gff_prokka:
    type: pandas.CSVDataSet
    filepath: data/02_intermediate/gff_prokka.csv
    layer: intermediate
    #load_args:
    #    index_col: 'prokka_unique'
    #save_args:
    #    index: True

data_processing.annots_gff_prokka:
    type: pandas.CSVDataSet
    filepath: data/02_intermediate/other_annotations_gff_prokka.csv
    layer: intermediate

data_processing.prokka_bins:
  type: json.JSONDataSet
  filepath: data/02_intermediate/prokka_bins.json
  layer: intermediate

data_processing.updated_gff_prokka:
    type: pandas.CSVDataSet
    filepath: data/02_intermediate/updated_gff_prokka.csv
    layer: intermediate
    #load_args:
    #    index_col: 'gid'
    #save_args:
    #    index: True

data_processing.go_gff_prokka:
    type: pandas.CSVDataSet
    filepath: data/02_intermediate/go_gff_prokka.csv
    layer: intermediate
    #load_args:
    #    index_col: 'gid'
    #save_args:
    #    index: True

updated2_gff_prokka:
    type: pandas.CSVDataSet
    filepath: data/02_intermediate/updated2_gff_prokka.csv
    layer: intermediate
    #load_args:
    #    index_col: 'gid'
    #save_args:
    #    index: True

hierarchy_go:
    type: networkx.JSONDataSet
    filepath: data/04_feature/go_hierarchy.json
    layer: feature

uni_go:
  type: json.JSONDataSet
  filepath: data/04_feature/uniprot_go.json
  layer: feature

go_uni:
  type: json.JSONDataSet
  filepath: data/04_feature/go_uniprot.json
  layer: feature

prokka_edges:
    type: pandas.CSVDataSet
    filepath: data/03_primary/prokka_edges.csv
    layer: primary
    load_args:
            dtype: {"node1":"object","node2":"object","weight":"int8","edge_length":"float64","edge_scaf":"object","edge_annot":"object"} # "layer2":"category"} # ,
node_features:
    type: pandas.CSVDataSet
    filepath: data/03_primary/node_features.csv
    layer: primary

bin_edges:
    type: pandas.CSVDataSet
    filepath: data/04_feature/bin_edges.csv
    layer: feature
    load_args:
        dtype: {"node1":"object","layer1":"category","node2":"object","layer2":"category","weight":"int8"}

#bee_mlnetwork:
#    type: kedromcbee.extras.dataset.mlnetwork_dataset.MLNetworkDataSet
#    filepath: data/04_feature/mbee_network.csv
#    layer: feature

bee_graph: #networks.b
    type: networkx.JSONDataSet
    filepath: data/04_feature/bee_graph.json
    layer: feature

annot_graph: 
    type: networkx.JSONDataSet
    filepath: data/04_feature/annot_graph.json
    layer: feature

networks.edges_info:
    type: pandas.CSVDataSet
    filepath: data/04_feature/edges_info.csv
    layer: feature
